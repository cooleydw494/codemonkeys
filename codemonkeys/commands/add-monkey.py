import os
import sys
import tempfile
from io import StringIO

from ruamel.yaml import CommentedMap

from codemonkeys.base_entities.command_class import Command
from codemonkeys.config.yaml_helpers import read_yaml_file, write_yaml_file
from codemonkeys.utils.monk.theme_functions import print_t, input_t
from codemonkeys.utils.monkey_config.add_monkey_input_prompts import INPUT_PROMPTS
from codemonkeys.utils.monkey_config.monkey_config_validations import validate_monkey_name, get_user_config_value
from codemonkeys.defs import MONKEY_MANIFEST_PATH


class AddMonkey(Command):
    unnamed_arg_keys = ['monkey_name']
    monkey_name = None
    required_arg_keys = ['monkey_name']

    def run(self):
        if self.monkey_name is None or not validate_monkey_name(self.monkey_name):
            monkey_name = get_user_config_value("Please enter a name for your new monkey: ",
                                                validate_monkey_name, "(letters/hyphens only)")

        print_t(f"Let's configure your new {self.monkey_name} monkey", 'monkey')

        monkey_manifest = read_yaml_file(MONKEY_MANIFEST_PATH, ruamel=True)

        if self.monkey_name in monkey_manifest.keys():
            print_t(f"A monkey named {self.monkey_name} already exists.", 'important')
            result = input_t(f"Would you like to overwrite the existing config?", '(y/n)')
            if result.lower() != 'y':
                sys.exit(0)
            else:
                print_t("Continuing config...", 'done')

        new_monkey_data = _process_input_prompts(INPUT_PROMPTS)

        comment = f"Config for {self.monkey_name} generated by `monk add-monkey`"
        new_monkey_commented_map = CommentedMap(new_monkey_data)
        new_monkey_commented_map.yaml_set_start_comment(comment)

        monkey_manifest[self.monkey_name] = new_monkey_commented_map

        yaml_string = StringIO()
        write_yaml_file(yaml_string, monkey_manifest, ruamel=True)

        yaml_string = yaml_string.getvalue().replace(self.monkey_name + ":", os.linesep + self.monkey_name + ":")

        with tempfile.NamedTemporaryFile('w', delete=False) as temp_file:
            temp_file_name = temp_file.name
            temp_file.write(yaml_string)

        try:
            os.replace(temp_file_name, MONKEY_MANIFEST_PATH)
        except Exception as e:
            print_t("An error occurred while updating the monkey-manifest file: " + str(e), 'error')
            return

        print_t("Config complete. The 'monkey-manifest.yaml' file has been updated.", 'done')


def _process_input_prompts(data):
    monkey_data = {}
    for key, validate_function, hint in data:
        user_value = get_user_config_value(key, validate_function, hint)
        if user_value == 'null':
            monkey_data[key] = None
        elif user_value is not None:
            monkey_data[key] = user_value
    return monkey_data
