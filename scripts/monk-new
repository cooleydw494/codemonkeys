#!/usr/bin/env python
import os
import shutil
import sys

from termcolor import colored

from codemonkeys.cmdefs import (CM_ENV_DEFAULT_PATH, CM_MONKEY_MANIFEST_DEFAULT_PATH, CM_ENV_CLASS_PATH,
                                CM_MONKEY_CONFIG_DEFAULTS_DEFAULT_PATH,CM_THEME_CONFIG_PATH, CM_DEFAULT_AUTOMATION_PATH,
                                CM_MONKEY_CONFIG_CLASS_PATH, CM_GITIGNORE_DEFAULT_PATH, CM_README_DEFAULT_PATH,
                                CM_CONTEXT_FILE_EXAMPLE_PATH, CM_DEFAULT_REQUIREMENTS_PATH)

top_level_dirs = [
    'abilities',
    'automations',
    'barrels',
    'commands',
    'config',
    'composables',
    'stor',
]

config_dirs = [
    'framework',
]

stor_dirs = [
    'context',
    'output',
    'work_path',
    'temp',
]

# Get the new project name from the command line arguments
try:
    new_project_name = sys.argv[1]
except IndexError:
    print(colored('Please provide a project name.', 'red'))
    sys.exit(1)

if os.path.exists(new_project_name):
    print(colored(f"Directory '{new_project_name}' already exists.", 'red'))
    sys.exit(1)

if not new_project_name.isalpha():
    print(colored("Project name must only contain letters/underscores to enable relative imports within user modules",
                  'red'))
    sys.exit(1)

print(colored(f"Initializing new CodeMonkeys project '{new_project_name}'...", 'green'))

# Create the project root directory
print(colored(f"Creating directory: {new_project_name}", 'cyan'))
os.makedirs(new_project_name, exist_ok=True)

project_path = os.path.join(os.getcwd(), new_project_name)

# Create the default .env file
print(colored("Creating default .env file", 'cyan'))
shutil.copyfile(CM_ENV_DEFAULT_PATH, os.path.join(project_path, ".env"))

# Create the top level directories
for top_level_dir in top_level_dirs:
    print(colored(f"Creating directory: {top_level_dir}", 'cyan'))
    os.makedirs(os.path.join(project_path, top_level_dir), exist_ok=True)

# Create the config directories
for config_dir in config_dirs:
    print(colored(f"Creating directory: config/{config_dir}", 'cyan'))
    os.makedirs(os.path.join(project_path, 'config', config_dir), exist_ok=True)

# Create the stor directories
for stor_dir in stor_dirs:
    print(colored(f"Creating directory: stor/{stor_dir}", 'cyan'))
    os.makedirs(os.path.join(project_path, 'stor', stor_dir), exist_ok=True)

# Create the config files
print(colored("Creating config/example files...", 'cyan'))
config_path = os.path.join(project_path, 'config')
shutil.copyfile(CM_MONKEY_MANIFEST_DEFAULT_PATH, os.path.join(config_path, 'monkey-manifest.yaml'))
shutil.copyfile(CM_MONKEY_CONFIG_DEFAULTS_DEFAULT_PATH, os.path.join(config_path, 'monkey-config-defaults.yaml'))
shutil.copyfile(CM_CONTEXT_FILE_EXAMPLE_PATH, os.path.join(project_path, 'stor', 'context', 'context-file.txt'))
shutil.copyfile(CM_THEME_CONFIG_PATH, os.path.join(config_path, 'framework', 'theme.py'))

# Create Env class
env_class_path = os.path.join(config_path, 'framework', 'env_class.py')
shutil.copyfile(CM_ENV_CLASS_PATH, env_class_path)
# Fix theme import for project config files
with open(env_class_path, 'r') as f:
    lines = f.readlines()
with open(env_class_path, 'w') as f:
    for line in lines:
        f.write(line.replace('from codemonkeys.config.theme', 'from config.framework.theme'))

# Create the MonkeyConfig class
shutil.copyfile(CM_MONKEY_CONFIG_CLASS_PATH, os.path.join(config_path, 'framework', 'monkey_config_class.py'))

# Create the default automation
print(colored("Creating default automation...", 'cyan'))
shutil.copyfile(CM_DEFAULT_AUTOMATION_PATH, os.path.join(project_path, 'automations', 'default.py'))

# Create the default gitignore
print(colored("Creating default .gitignore...", 'cyan'))
shutil.copyfile(CM_GITIGNORE_DEFAULT_PATH, os.path.join(project_path, '.gitignore'))

# Create the default requirements
print(colored("Creating default requirements...", 'cyan'))
shutil.copyfile(CM_DEFAULT_REQUIREMENTS_PATH, os.path.join(project_path, 'requirements.txt'))

# Create the default README
print(colored("Creating default README...", 'cyan'))
shutil.copyfile(CM_README_DEFAULT_PATH, os.path.join(project_path, 'README.md'))

print(colored('CodeMonkeys setup complete', 'green'))
