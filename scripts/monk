#!/usr/bin/env python
import os
import subprocess
import sys
import traceback

from codemonkeys.defs import nl
from codemonkeys.utils.defs_utils import find_project_root
from codemonkeys.utils.monkey_config.update_monkey_config_class import update_monkey_config_class
from codemonkeys.utils.env.update_env_class import update_env_class

sys.path.append(find_project_root())
# Regenerate "magic" config/env stuff
update_env_class()
update_monkey_config_class()

from codemonkeys.utils.monk.find_entity import find_entity
from codemonkeys.utils.monk.parse_monk_args import parse_monk_args
from codemonkeys.utils.monk.run_entities import run_automation, run_command, run_barrel
from codemonkeys.utils.monk.theme_functions import print_t


# Some basic environment checks
version = sys.version_info[0]
if version < 3:
    print_t("It appears you're running Python 2. Please use Python 3.", 'error')
    sys.exit(1)

# Setup and Parse Monk Arguments
monk_args, named_args, unnamed_args, action, entity_name, entity_type = parse_monk_args()

# Find Entity (includes interactive selection)
entity_path = find_entity(entity_name, entity_type)

# Get the correctly chosen entity name without extension (user might have given incorrect name)
entity_name = os.path.splitext(os.path.basename(entity_path))[0]

if action == 'edit':
    subprocess.run(['vim', entity_path.strip()])

elif action == 'help':
    print()
    subprocess.run([sys.executable, entity_path.strip()])
    print()

elif action == 'run':
    try:

        print_t(f'{entity_type}: {entity_name}', 'quiet')

        # Commands
        if entity_type == 'command':
            extension = os.path.splitext(entity_path.strip())[1]
            if extension == ".py":
                run_command(entity_path.strip(), entity_name, monk_args, named_args, unnamed_args)
            elif extension == ".sh":
                subprocess.call(['bash', entity_path.strip()] + sys.argv[2:])
            elif extension == ".bat":
                subprocess.call([entity_path.strip()] + sys.argv[2:])
            else:
                print_t(f"Unsupported entity_type: {extension}. find_entity should filter this.", 'error')
                exit(1)

        # Automations
        elif entity_type == 'automation':
            run_automation(entity_path.strip(), entity_name, monk_args, named_args, unnamed_args)

        # Barrels
        elif entity_type == 'barrel':
            run_barrel(entity_path.strip(), entity_name, monk_args, named_args, unnamed_args)

        # Unsupported
        else:
            print_t(f'unsupported entity_type: {entity_type}', 'error')
            exit(1)

    except KeyboardInterrupt:
        print_t(f"{nl}Exiting due to KeyboardInterrupt from user.", 'quiet')
        exit(1)

    except ValueError as e:
        print_t(f"{nl}Error: {e}", 'error')
        exit(1)

    except Exception as e:
        print_t(f"{nl}Error: {e}", 'error')
        print_t(f"{nl}Error Trace:{nl}{nl.join(traceback.format_exc().splitlines())}")
        exit(1)
else:
    print_t(f'unsupported action: {action}', 'error')
    exit(1)

exit(0)
